// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  CLIENT
  AGENCY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentMethod {
  ONLINE
  AGENCY
}

/// Model for Users
model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String    @unique
  phone     String?
  createdAt DateTime  @default(now())
  userType  UserType
  cars      Car[]     @relation("UserCars")
  bookings  Booking[] @relation("RenterBookings")
  reviews   Review[]  @relation("UserReviews")
  profileId Int? // Optional field to link to Profile
  Profile   Profile?
  Agency    Agency?   @relation(fields: [agencyId], references: [id])
  agencyId  Int? // Optional field to link to Agency if the user is an agency

  @@index([email])
  @@index([phone])
}

/// Model for Profiles
model Profile {
  id        Int    @id @default(autoincrement())
  userId    Int    @unique // Each profile is linked to one user
  firstName String
  lastName  String
  idNumber  String
  address   String
  city      String
  country   String
  zipCode   String
  user      User   @relation(fields: [userId], references: [id])

  @@index([userId]) // Optional: Index for the userId
}

model Agency {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  address   String
  phone     String?
  email     String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cars      Car[]     @relation("AgencyCars") // Relation to cars owned by the agency
  bookings  Booking[] // Relation to bookings for agency-owned cars
  userId    Int? // Link to User table
  User      User[]

  @@index([name])
  @@index([email])
}

model Car {
  id            Int          @id @default(autoincrement())
  ownerId       Int // Owner can be an individual user or agency
  agencyId      Int? // Agency owning the car (optional)
  brand         String
  model         String
  year          Int
  mileage       Int
  description   String?
  dailyPrice    Float
  availableFrom DateTime
  availableTo   DateTime
  image         String? // Image field
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  owner         User         @relation("UserCars", fields: [ownerId], references: [id])
  agency        Agency?      @relation("AgencyCars", fields: [agencyId], references: [id]) // Link to Agency
  bookings      Booking[]
  reviews       Review[]
  features      CarFeature[] // Direct relation to car features

  @@index([brand, model, year])
}

model CarFeature {
  id    Int    @id @default(autoincrement())
  carId Int
  name  String // Feature name (e.g., "GPS", "Air Conditioning")
  car   Car    @relation(fields: [carId], references: [id])

  @@unique([carId, name]) // Ensure unique features per car
  @@index([carId])
}

model Booking {
  id              Int           @id @default(autoincrement())
  carId           Int
  renterId        Int
  agencyId        Int? // Agency booking for agency-owned cars
  startDate       DateTime
  endDate         DateTime
  totalAmount     Float
  paymentMethod   PaymentMethod
  bookingDate     DateTime      @default(now())
  status          BookingStatus
  deliveryAddress String?
  returnAddress   String?
  deliveryTime    DateTime?
  returnTime      DateTime?
  car             Car           @relation(fields: [carId], references: [id])
  renter          User          @relation("RenterBookings", fields: [renterId], references: [id])
  agency          Agency?       @relation(fields: [agencyId], references: [id]) // Relation to agency if applicable

  @@index([carId])
  @@index([renterId])
  @@index([status])
}

model Review {
  id         Int      @id @default(autoincrement())
  carId      Int
  renterId   Int
  rating     Int      @map("note")
  comment    String?
  reviewDate DateTime @default(now())
  car        Car      @relation(fields: [carId], references: [id])
  renter     User     @relation("UserReviews", fields: [renterId], references: [id])

  @@index([carId])
  @@index([renterId])
}
